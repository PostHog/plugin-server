name: 'CD'

on:
    push:
        branches:
            - main
            - master

jobs:
    containerize:
        name: Build and push container image
        runs-on: ubuntu-20.04
        steps:
            - name: Checkout the repository
              uses: actions/checkout@v2
              with:
                  fetch-depth: 0

            - name: Detect package version and set up image tags
              id: version
              run: |
                  PACKAGE_VERSION=$(node -p "require('./package.json').version")
                  PACKAGE_VERSION_TAG="v$PACKAGE_VERSION"
                  DOCKER_TAGS="posthog/plugin-server:latest,public.ecr.aws/p1o5l3m0/posthog-plugin-server:latest"
                  if git rev-parse "$PACKAGE_VERSION_TAG"; then
                    IS_NEW_VERSION=false
                  else
                    IS_NEW_VERSION=true
                    DOCKER_TAGS="$DOCKER_TAGS,posthog/plugin-server:$PACKAGE_VERSION,public.ecr.aws/p1o5l3m0/posthog-plugin-server:$PACKAGE_VERSION,posthog/plugin-server:latest-release,public.ecr.aws/p1o5l3m0/posthog-plugin-server:latest-release"
                  fi
                  echo "PACKAGE_VERSION=$PACKAGE_VERSION" >> $GITHUB_ENV
                  echo "PACKAGE_VERSION_TAG=$PACKAGE_VERSION_TAG" >> $GITHUB_ENV
                  echo "IS_NEW_VERSION=$IS_NEW_VERSION" >> $GITHUB_ENV
                  echo "::set-output name=IS_NEW_VERSION::$IS_NEW_VERSION"
                  echo "::set-output name=DOCKER_TAGS::$DOCKER_TAGS"

            - name: Set up QEMU
              uses: docker/setup-qemu-action@v1

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v1

            - name: Log in to DockerHub
              uses: docker/login-action@v1
              with:
                  username: ${{ secrets.DOCKERHUB_USERNAME }}
                  password: ${{ secrets.DOCKERHUB_TOKEN }}

            - name: Log in to Public ECR
              uses: docker/login-action@v1
              with:
                  registry: public.ecr.aws
                  username: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  password: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
              env:
                  AWS_REGION: us-east-1

            - name: Build and push latest
              uses: docker/build-push-action@v2
              with:
                  push: true
                  tags: ${{ steps.version.outputs.DOCKER_TAGS }}

    release:
        name: Publish release if new version
        runs-on: ubuntu-20.04

        steps:
            - name: Checkout the repository
              uses: actions/checkout@v2
              with:
                  path: 'plugin-server'
                  fetch-depth: 0

            - name: Detect package version
              id: version
              run: |
                  cd plugin-server/
                  PACKAGE_VERSION=$(node -p "require('./package.json').version")
                  PACKAGE_VERSION_TAG="v$PACKAGE_VERSION"
                  if git rev-parse "$PACKAGE_VERSION_TAG"; then
                    IS_NEW_VERSION=false
                  else
                    IS_NEW_VERSION=true
                  fi
                  echo "PACKAGE_VERSION=$PACKAGE_VERSION" >> $GITHUB_ENV
                  echo "PACKAGE_VERSION_TAG=$PACKAGE_VERSION_TAG" >> $GITHUB_ENV
                  echo "IS_NEW_VERSION=$IS_NEW_VERSION" >> $GITHUB_ENV
                  echo "::set-output name=IS_NEW_VERSION::$IS_NEW_VERSION"

            - name: Set up Node 14
              if: steps.version.outputs.IS_NEW_VERSION == 'true'
              uses: actions/setup-node@v2
              with:
                  node-version: 14
                  registry-url: https://registry.npmjs.org

            - name: Install dependencies
              if: steps.version.outputs.IS_NEW_VERSION == 'true'
              run: cd plugin-server/ && yarn --frozen-lockfile

            - name: Publish the package in the npm registry
              if: steps.version.outputs.IS_NEW_VERSION == 'true'
              run: cd plugin-server/ && npm publish --access public
              env:
                  DATABASE_URL: 'postgres://postgres:postgres@localhost:${{ job.services.postgres.ports[5432] }}/postgres'
                  REDIS_URL: 'redis://localhost'
                  NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

            - name: Create GitHub release
              if: steps.version.outputs.IS_NEW_VERSION == 'true'
              uses: actions/create-release@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  tag_name: ${{ env.PACKAGE_VERSION_TAG }}
                  release_name: ${{ env.PACKAGE_VERSION }}

            - name: Check out main repo
              if: steps.version.outputs.IS_NEW_VERSION == 'true'
              uses: actions/checkout@v2
              with:
                  repository: 'PostHog/posthog'
                  path: 'posthog/'

            - name: Install new plugin server version in main repo
              if: steps.version.outputs.IS_NEW_VERSION == 'true'
              run: |
                  cd posthog/plugins/
                  jq '.dependencies."@posthog/plugin-server" = "${{ steps.version.outputs.PACKAGE_VERSION }}"' package.json | sponge package.json
                  yarn

            - name: Create main repo pull request
              uses: peter-evans/create-pull-request@v3
              with:
                  path: posthog/
                  commit-message: Update plugin server to ${{ steps.version.outputs.PACKAGE_VERSION }}
                  committer: PostHog Bot <hey@posthog.com>
                  branch: plugin-server-${{ steps.version.outputs.PACKAGE_VERSION_TAG }}
                  delete-branch: true
                  title: Update plugin server to ${{ steps.version.outputs.PACKAGE_VERSION }}
                  body: "[`@posthog/plugin-server`](https://www.npmjs.com/package/@posthog/plugin-server) version ${{ steps.version.outputs.PACKAGE_VERSION }} has been released. This updates PostHog to use it."

            - name: Output pull request result
              run: |
                  echo "PostHog pull request for plugin server version ${{ steps.version.outputs.PACKAGE_VERSION }} ready: ${{ steps.cpr.outputs.pull-request-url }}"
