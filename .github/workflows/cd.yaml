name: 'CD'

on:
    push:
        branches:
            - main
            - master

jobs:
    check-package-version:
        name: Check package version and detect an update
        runs-on: ubuntu-20.04
        outputs:
            repo-version: ${{ steps.check-package-version.outputs.repo-version }}
            published-version: ${{ steps.check-package-version.outputs.published-version }}
            is-unpublished-version: ${{ steps.check-package-version.outputs.is-unpublished-version }}
        steps:
            - name: Checkout the repository
              uses: actions/checkout@v2

            - name: Check package version and detect an update
              id: check-package-version
              uses: PostHog/check-package-version@v1

    containerize:
        name: Build and push container image
        runs-on: ubuntu-20.04
        needs: check-package-version
        env:
            REPO_VERSION: ${{ needs.check-package-version.outputs.repo-version }}
            PUBLISHED_VERSION: ${{ needs.check-package-version.outputs.published-version }}
            IS_UNPUBLISHED_VERSION: ${{ needs.check-package-version.outputs.is-unpublished-version }}
        steps:
            - name: Checkout the repository
              uses: actions/checkout@v2
              with:
                  fetch-depth: 0

            - name: Determine relevant Docker tags
              id: docker-tags
              run: |
                  DOCKER_TAGS="posthog/plugin-server:latest,public.ecr.aws/p1o5l3m0/posthog-plugin-server:latest"
                  if [[ $IS_UNPUBLISHED_VERSION == "true" ]]; then
                    DOCKER_TAGS="$DOCKER_TAGS,posthog/plugin-server:$REPO_VERSION,public.ecr.aws/p1o5l3m0/posthog-plugin-server:$REPO_VERSION,posthog/plugin-server:latest-release,public.ecr.aws/p1o5l3m0/posthog-plugin-server:latest-release"
                  fi
                  echo "::set-output name=docker-tags::$DOCKER_TAGS"

            - name: Set up QEMU
              uses: docker/setup-qemu-action@v1

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v1

            - name: Log in to DockerHub
              uses: docker/login-action@v1
              with:
                  username: ${{ secrets.DOCKERHUB_USERNAME }}
                  password: ${{ secrets.DOCKERHUB_TOKEN }}

            - name: Log in to Public ECR
              uses: docker/login-action@v1
              with:
                  registry: public.ecr.aws
                  username: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  password: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
              env:
                  AWS_REGION: us-east-1

            - name: Build and push latest
              uses: docker/build-push-action@v2
              with:
                  push: true
                  tags: ${{ steps.docker-tags.outputs.docker-tags }}

    release:
        name: Publish release if new version
        runs-on: ubuntu-20.04
        needs: check-package-version
        if: needs.check-package-version.outputs.is-unpublished-version == 'true'
        env:
            REPO_VERSION: ${{ needs.check-package-version.outputs.repo-version }}
            PUBLISHED_VERSION: ${{ needs.check-package-version.outputs.published-version }}
        steps:
            - name: Checkout the repository
              uses: actions/checkout@v2
              with:
                  fetch-depth: 0

            - name: Set up Node 14
              uses: actions/setup-node@v2
              with:
                  node-version: 14
                  registry-url: https://registry.npmjs.org

            - name: Install dependencies
              run: yarn --frozen-lockfile

            - name: Publish the package in the npm registry
              run: npm publish --access public
              env:
                  DATABASE_URL: 'postgres://postgres:postgres@localhost:${{ job.services.postgres.ports[5432] }}/postgres'
                  REDIS_URL: 'redis://localhost'
                  NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

            - name: Create GitHub release
              uses: actions/create-release@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  tag_name: v${{ env.REPO_VERSION }}
                  release_name: ${{ env.REPO_VERSION }}

    create-pull-request:
        name: Create main repo PR with new plugin server version
        runs-on: ubuntu-20.04
        needs: [check-package-version, release]
        env:
            REPO_VERSION: ${{ needs.check-package-version.outputs.repo-version }}
            PUBLISHED_VERSION: ${{ needs.check-package-version.outputs.published-version }}
        steps:
            - name: Check out main repo
              uses: actions/checkout@v2
              with:
                  repository: 'PostHog/posthog'

            - name: Install new plugin server version in main repo
              run: |
                  cd plugins/
                  mv package.json package.old.json
                  jq --indent 4 '.dependencies."@posthog/plugin-server" = "${{ env.REPO_VERSION }}"' package.old.json > package.json
                  rm package.old.json
                  for i in $(seq 1 $RETRY_TIMES)
                      # Retry loop because of npm being _eventually_ consistent
                      do yarn && break || $( yarn cache clean && [ $i -ne $RETRY_TIMES ] && sleep $RETRY_WAIT_SECONDS || false )
                  done
              env:
                  RETRY_TIMES: 10
                  RETRY_WAIT_SECONDS: 10

            - name: Create main repo pull request
              id: main-repo-pr
              uses: peter-evans/create-pull-request@v3
              with:
                  token: ${{ secrets.PERSONAL_GITHUB_TOKEN }}
                  commit-message: Update plugin server to ${{ env.REPO_VERSION }}
                  committer: posthog-bot <hey@posthog.com>
                  branch: plugin-server-${{ env.REPO_VERSION }}
                  delete-branch: true
                  title: Update plugin server to ${{ env.REPO_VERSION }}
                  body: |
                      ## Changes

                      Plugin server version ${{ env.REPO_VERSION }} has been released. This updates PostHog to use it.

                      https://github.com/PostHog/plugin-server/compare/v${{ env.PUBLISHED_VERSION }}...v${{ env.REPO_VERSION }} • [GitHub releases](https://github.com/PostHog/plugin-server/releases) • [npm releases](https://www.npmjs.com/package/@posthog/plugin-server?activeTab=version)

            - name: Output pull request result
              run: |
                  echo "PostHog pull request for plugin server version ${{ env.REPO_VERSION }} ready: ${{ steps.main-repo-pr.outputs.pull-request-url }}"
